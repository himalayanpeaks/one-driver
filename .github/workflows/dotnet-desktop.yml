name: .NET Build, Test and Publish

on:
  push:
    branches: [ "master" ]
    tags:
      - '*.*.*'          # Matches tags like 1.0.0, 2.1.3
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]
    runs-on: windows-latest

    env:
      Solution_Name: OneDriver.Framework.sln
      Test_Project_Path: OneDriver.Framework.UnitTest.sln

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET 8.0
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Restore Dependencies
        run: msbuild $env:Solution_Name /t:Restore /p:Configuration=${{ matrix.configuration }}

      - name: Build Solution
        run: msbuild $env:Solution_Name /p:Configuration=${{ matrix.configuration }}

      - name: Run Unit Tests
        run: dotnet test $env:Test_Project_Path /p:Configuration=${{ matrix.configuration }}

  publish:
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Determine version
        id: version
        shell: pwsh
        run: |
          if ("${{ github.ref_type }}" -eq "tag") {
            # Use the tag directly
            $ver = "${{ github.ref_name }}"
          } else {
            # Try to find the latest tag
            $lastTag = git describe --tags --abbrev=0 2>$null
            if ($lastTag) {
              # Increment alpha count since last tag
              $count = git rev-list --count "$lastTag"..HEAD
              $ver = "$lastTag-alpha.$count"
            } else {
              # Default version if no tags exist
              $count = git rev-list --count HEAD
              $ver = "0.0.1.$count"
            }
          }
          echo "PackageVersion=$ver" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          Write-Host "Determined version: $ver"

      - name: Pack NuGet Package
        run: dotnet pack $env:Solution_Name `
             -c Release `
             -o ./packages `
             -p:PackageVersion=${{ steps.version.outputs.PackageVersion }} `
             --no-build

      - name: Publish NuGet Package
        run: dotnet nuget push ./packages/*.nupkg `
             --source https://api.nuget.org/v3/index.json `
             --api-key ${{ secrets.NUGET_API_KEY }} `
             --skip-duplicate
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'

